g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median")) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
axis.title.y = element_text(color="forestgreen" , vjust=.5)) + theme(legend.title = element_text(colour="chocolate", size=16, face="bold")) +
scale_color_discrete(name="Calcs")
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median")) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
axis.title.y = element_text(color="forestgreen" , vjust=.5)) +
scale_colour_manual(name='', values=c('Mean'='grey', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
axis.title.y = element_text(color="forestgreen" , vjust=.5)) +
scale_colour_manual(name='', values=c('Mean'='grey', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
axis.title.y = element_text(color="forestgreen" , vjust=.5)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen",binwidth=.01) +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_discrete(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_discrete(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), show_guide=T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE))) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE))) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE)),show_guide = F) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE)),show_guide = F) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE)),show_guide = T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE)),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),show_guide = T)) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),show_guide = T)) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean",show_guide = T)) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Mean",show_guide = T)) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean",show_guide = T)) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Mean",show_guide = T)) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean"),show_guide = T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Mean"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean"),show_guide = T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean"),show_guide = T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median",linetype="Median"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean"),show_guide = T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35)) +
scale_colour_manual(name='Calcs', values=c('Mean'='blue', 'Median'='red'))
g
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean"),show_guide = T) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median"),show_guide = T) + theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5)) +
scale_colour_manual(name='Calcs', values=c('Mean'='blue', 'Median'='red'))
g
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
imputedData <- padata
for (i in 1:nrow(imputedData)) {
if (is.na(imputedData$steps[i])) {
imputedData$steps[i] <- gdata[which(imputedData$interval[i] == gdata$interval), ]$steps
}
}
gdata[gdata$steps==max(gdata$steps),]
?cat
maxintv<-gdata[gdata$steps==max(gdata$steps),]
dim(maxintv)
gdata<-na.omit(padata)
gdata<- gdata %>% group_by(interval) %>% summarize(steps = mean(steps, na.rm = TRUE))
g <- ggplot(gdata, aes(x = interval,y=steps)) +
geom_line() + scale_x_continuous(breaks=seq(0,2400, by=100),label=c(0:24)) +
xlab("hours gathered in 5 minute intervals") + ylab("average number of steps")
g
maxintv<-gdata[gdata$steps==max(gdata$steps),]
maxintv
maxintv<-gdata[gdata$steps==max(gdata$steps),]
cat("The maximun number of steps is in the five minute interval starting on",maxintv[,1]/100," with an average of ", maxintv[,2]," steps")
maxintv<-gdata[gdata$steps==max(gdata$steps),]
cat("The maximun number of steps is in the five minute interval starting on ",maxintv[1,1]/100," with an average of ", maxintv[1,2]," steps")
maxintv<-gdata[gdata$steps==max(gdata$steps),]
cat("The maximun number of steps is in the five minute interval starting on ",as.character(maxintv[1,1]/100),"a.m. with an average of ", as.character(maxintv[1,2])," steps")
maxintv<-gdata[gdata$steps==max(gdata$steps),]
cat("The maximun number of steps is in the five minute interval starting on ",as.character(maxintv[1,1]/100),"a.m. with an average of ", as.character(round(maxintv[1,2]),1)," steps")
cat("The observed maximun number of steps is in the five minute interval starting on",as.character(maxintv[1,1]/100),"a.m. with an average of", as.character(round(maxintv[1,2]),1),"steps")
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"a.m. with an average of", as.character(round(maxintv[1,2]),2),"steps")
?round
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", as.character(round(maxintv[1,2]),4),"steps")
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", as.character(round(maxintv[1,2]),digits=2),"steps")
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", as.character(round(as.integer(maxintv[1,2])),digits=2),"steps")
str(maxintv)
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", as.character(round(as.numeric(maxintv[1,2])),digits=2),"steps")
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", as.character(round(as.numeric(maxintv[1,2])),digits=5),"steps")
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", round(as.numeric(maxintv[1,2]),digits=5),"steps")
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", round(as.numeric(maxintv[1,2]),digits=2),"steps")
```{r}
cat("Total number of missing values: ",sum(is.na(padata)))
```
str(idata)
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
```
- Calculate and report the mean and median total number of steps taken per day.
```{r}
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
a<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(a)<-c("imputed NAs","deleted NAs","difference")
a
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
meanDay
meanDay<-mean(gdata$steps,na.rm = TRUE)
cat("mean steps per day:",meanDay)
medianDay<-median(gdata$steps,na.rm = TRUE)
cat("median steps per day:",medianDay)
meanDay<-round(mean(gdata$steps,na.rm = TRUE),3)
cat("mean steps per day:",meanDay,2)
medianDay<-round(median(gdata$steps,na.rm = TRUE),3)
cat("median steps per day:",medianDay)
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
meanDay
gdata<- gdata %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
gdata<-na.omit(padata)
```
- Calculate the total number of steps taken per day
```{r,echo=TRUE,message=FALSE}
library(dplyr)
gdata<- gdata %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
meanDay<-round(mean(gdata$steps,na.rm = TRUE),3)
cat("mean steps per day:",meanDay)
medianDay<-round(median(gdata$steps,na.rm = TRUE),3)
cat("median steps per day:",medianDay)
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
imputedData <- padata
for (i in 1:nrow(imputedData)) {
if (is.na(imputedData$steps[i])) {
imputedData$steps[i] <- omdata[which(imputedData$interval[i] == gdata$interval), ]$steps
}
}
maxintv<-omdata[omdata$steps==max(omdata$steps),]
omdata<-na.omit(padata)
omdata<- omdata %>% group_by(interval) %>% summarize(steps = mean(steps, na.rm = TRUE))
g <- ggplot(omdata, aes(x = interval,y=steps)) +
geom_line() + scale_x_continuous(breaks=seq(0,2400, by=100),label=c(0:24)) +
xlab("hours gathered in 5 minute intervals") + ylab("average number of steps")
g
```
- Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE,message=FALSE,warning=FALSE}
maxintv<-omdata[omdata$steps==max(omdata$steps),]
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", round(as.numeric(maxintv[1,2]),digits=2),"steps")
```
## Imputing missing values
- Calculate and report the total number of missing values in the dataset.
```{r, warning=FALSE}
cat("Total number of missing values: ",sum(is.na(padata)))
```
- Devise a strategy for filling in all of the missing values in the dataset.
Replace missing values with interval average
#
- Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
imputedData <- padata
for (i in 1:nrow(imputedData)) {
if (is.na(imputedData$steps[i])) {
imputedData$steps[i] <- omdata[which(imputedData$interval[i] == gdata$interval), ]$steps
}
}
library(reshape2)
head(mtcars)
# Melting data frames
mtcars$carname <- rownames(mtcars) # this is done to have the rownames as first id column in melt
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(carMelt,n=3)
tail(carMelt,n=3)
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(idata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(idata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
```
- Calculate and report the mean and median total number of steps taken per day.
```{r}
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
meanDay<-round(mean(gdata$steps,na.rm = TRUE),3)
meadDay
meanDay
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
medianDay
imedianDay
meanDay
imeanDay
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(idata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(idata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
a<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(a)<-c("imputed NAs","deleted NAs","difference")
a
sumperday<-tapply(padata$steps,as.factor(padata$date),sum,na.rm=T)
mean(padata$steps,na.rm = TRUE)
# For this part of the assignment, you can ignore the missing values in the dataset.
# Loading and preprocessing the data
#
# Show any code that is needed to Load the data (i.e. read.csv())
#
# Process/transform the data (if necessary) into a format suitable
# Loading and preprocessing the data
#
# Show any code that is needed to Load the data (i.e. read.csv())
#
# Process/transform the data (if necessary) into a format suitable
gdata<-na.omit(padata)
gdata<- gdata %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
# Make a histogram of the total number of steps taken each day
g <- ggplot(gdata, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
g
# # Calculate and report the mean and median of the total number of steps taken per day
meanDay<-mean(gdata$steps,na.rm = TRUE)
medianDay<-median(gdata$steps,na.rm = TRUE)
# What is the average daily activity pattern?
hdata<-na.omit(padata)
hdata<- hdata %>% group_by(interval) %>% summarize(steps = mean(steps, na.rm = TRUE))
# Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the
# average number of steps taken, averaged across all days (y-axis)
h <- ggplot(hdata, aes(x = interval,y=steps))
h<-h+geom_line() + scale_x_continuous(breaks=seq(0,2400, by=100),label=c(0:24)) +
xlab("hours gathered in 5 minute intervals") + ylab("average number of steps")
h
# Which 5-minute interval, on average across all the days in the dataset, contains
# the maximum number of steps?
hdata[hdata$steps==max(hdata$steps),1]
# Imputing missing values
sum(is.na(padata))
# Note that there are a number of days/intervals where there are missing values
# (coded as NA). The presence of missing days may introduce bias into some calculations
# or summaries of the data. Calculate and report the total number of missing values
# in the dataset (i.e. the total number of rows with NAs). Devise a strategy for
# filling in all of the missing values in the dataset. The strategy does not need
# to be sophisticated. For example, you could use the mean/median for that day,
# or the mean for that 5-minute interval, etc.
#
# Create a new dataset that is equal to the original dataset but with the missing
# data filled in.
imputedData <- padata
for (i in 1:nrow(imputedData)) {
if (is.na(imputedData$steps[i])) {
imputedData$steps[i] <- hdata[which(imputedData$interval[i] == hdata$interval), ]$steps
}
}
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(gdata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(gdata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
a<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(a)<-c("imputed NAs","deleted NAs","difference")
omitdata<-na.omit(padata)
```
- Calculate the total number of steps taken per day
```{r,echo=TRUE,message=FALSE}
library(dplyr)
databyDate<- omitdata %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
```
- Make a histogram of the total number of steps taken each day
```{r,echo=TRUE,message=FALSE,warning=FALSE}
library(ggplot2)
g <- ggplot(databyDate, aes(x = steps))
g <- g + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(databyDate$steps,na.rm = TRUE),color="Mean"),show_guide = T) +
geom_vline(aes(xintercept=median(databyDate$steps,na.rm = TRUE),color="Median"),show_guide = T) +
scale_colour_manual(name='Calcs', values=c('Mean'='blue', 'Median'='red'))
g
meanDay<-round(mean(omitdata$steps,na.rm = TRUE),3)
cat("mean steps per day:",meanDay)
meanDay<-round(mean(databyDate$steps,na.rm = TRUE),3)
cat("mean steps per day:",meanDay)
medianDay<-round(median(databyDate$steps,na.rm = TRUE),3)
cat("median steps per day:",medianDay)
```
## What is the average daily activity pattern? ##
- Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
databyInterval<- omitdata %>% group_by(interval) %>% summarize(steps = mean(steps, na.rm = TRUE))
g <- ggplot(databyInterval, aes(x = interval,y=steps)) +
geom_line() + scale_x_continuous(breaks=seq(0,2400, by=100),label=c(0:24)) +
xlab("hours gathered in 5 minute intervals") + ylab("average number of steps")
g
maxintv<-databyInterval[databyInterval$steps==max(databyInterval$steps),]
cat("The maximun number of steps is observed in the five minute interval starting on",as.character(maxintv[1,1]/100),"am with an average of", round(as.numeric(maxintv[1,2]),digits=2),"steps")
```
## Imputing missing values
- Calculate and report the total number of missing values in the dataset.
```{r, echo=T,warning=FALSE}
cat("Total number of missing values: ",sum(is.na(padata)))
```
- Devise a strategy for filling in all of the missing values in the dataset.
Replace missing values with interval average
#
- Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r, echo=T}
imputedData <- padata
for (i in 1:nrow(imputedData)) {
if (is.na(imputedData$steps[i])) {
imputedData$steps[i] <- databyInterval[which(imputedData$interval[i] == databyInterval$interval), ]$steps
}
}
```
- Make a histogram of the total number of steps taken each day and
``{r, echo=T}
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(idata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(idata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
```
- Calculate and report the mean and median total number of steps taken per day.
```{r, echo=T}
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
a<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(a)<-c("imputed NAs","deleted NAs","difference")
a
```{r, echo=T,warnings=F}
imeanDay<-mean(idata$steps,na.rm = TRUE)
```{r, echo=T,warning=F}
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
imeanDay-meanDay
imedianDay-medianDay
impDiffdel<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(impDiffdel)<-c("imputed NAs","deleted NAs","difference")
impDiffdel
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
impDiffdel<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(impDiffdel)<-c("imputed NAs","deleted NAs","difference")
impDiffdel
idata<- imputedData %>% group_by(date) %>% summarize(steps = sum(steps, na.rm = TRUE))
i <- ggplot(idata, aes(x = steps))
i <- i + geom_histogram(fill="yellow",color="darkgreen") +
geom_vline(aes(xintercept=mean(idata$steps,na.rm = TRUE),color="Mean", linetype="Mean"), size=1, show_guide=TRUE) +
geom_vline(aes(xintercept=median(idata$steps,na.rm = TRUE),color="Median", linetype="Median"), size=1, show_guide=TRUE)
i
```
- Calculate and report the mean and median total number of steps taken per day.
```{r, echo=T,warning=F}
imeanDay<-mean(idata$steps,na.rm = TRUE)
imedianDay<-median(idata$steps,na.rm = TRUE)
impDiffdel<-data.frame(rbind(mean=c(imeanDay,meanDay,imeanDay-meanDay),median=c(imedianDay,medianDay,imedianDay-medianDay)))
names(impDiffdel)<-c("imputed NAs","deleted NAs","difference")
impDiffdel
```
setwd("~/R/RepReseach/PA1/PA1")
setwd("~/R/RepReseach/PA1")
setwd("~/GitHub/ReproductibleResearchProj1")
